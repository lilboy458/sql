I. Find distinct names of sailors

SELECT DISTINCT sname FROM Sailors;

II. Find all information on sailors who have reserved boat number 101

SELECT * FROM Sailors
WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 101);

III. Find names of sailors who have reserved at least one boat

SELECT DISTINCT sname FROM Sailors
WHERE sid IN (SELECT sid FROM Reserves);

IV. Find names of sailors who have reserved a red boat, ordered by age

SELECT DISTINCT S.sname, S.age
FROM Sailors S, Reserves R, Boats B
WHERE S.sid = R.sid AND R.bid = B.bid AND B.color = 'red'
ORDER BY S.age;

V. Find IDs and names of sailors who reserved two different boats on the same day

SELECT DISTINCT S.sid, S.sname
FROM Sailors S
WHERE EXISTS (
    SELECT 1 FROM Reserves R1, Reserves R2
    WHERE R1.sid = S.sid AND R2.sid = S.sid
      AND R1.bid <> R2.bid AND R1.day = R2.day
);

Would you like me to move to Question 9 (UNION, INTERSECT, EXCEPT queries) next?
You said:
yes
ChatGPT said:

Awesome! Let’s now proceed to:
9. UNION, INTERSECT, and EXCEPT – Using Sailors, Boats, and Reserves Tables

We’ll use the same data from Question 8.
✅ I. Find the IDs of sailors who have reserved a red boat OR a green boat

-- Sailors who reserved a red boat
SELECT DISTINCT R.sid
FROM Reserves R
JOIN Boats B ON R.bid = B.bid
WHERE B.color = 'red'

UNION

-- Sailors who reserved a green boat
SELECT DISTINCT R.sid
FROM Reserves R
JOIN Boats B ON R.bid = B.bid
WHERE B.color = 'green';

    Explanation: UNION combines both sets and removes duplicates.

✅ II. Find the names of sailors who have reserved boat 103

SELECT DISTINCT S.sname
FROM Sailors S
JOIN Reserves R ON S.sid = R.sid
WHERE R.bid = 103;

✅ III. Find the name and the age of the youngest sailor

SELECT sname, age
FROM Sailors
WHERE age = (SELECT MIN(age) FROM Sailors);

✅ IV. Find the names of sailors who have reserved all boats

SELECT sname
FROM Sailors S
WHERE NOT EXISTS (
    SELECT B.bid
    FROM Boats B
    MINUS
    SELECT R.bid
    FROM Reserves R
    WHERE R.sid = S.sid
);

    Explanation:

        This query uses a MINUS operation (Oracle's version of EXCEPT) to find if any boat is not reserved by a sailor.

        NOT EXISTS ensures only sailors who reserved all boats are selected.

✅ Let me know if you want to continue to Question 10 (Aggregation Operators with Sailors table) next.
You said:
yes
ChatGPT said:

Great! Let’s move on to:
10. Aggregation Operators – Using Sailors Table

We'll use the same Sailors table created earlier.
✅ I. Find the name and the age of the youngest sailor

SELECT sname, age
FROM Sailors
WHERE age = (SELECT MIN(age) FROM Sailors);

    Explanation: Gets the sailor(s) whose age matches the minimum age in the table.

✅ II. Find the average age of sailors for each rating level

SELECT rating, AVG(age) AS Average_Age
FROM Sailors
GROUP BY rating;

    Explanation: Uses GROUP BY on rating to get average age per rating.

✅ III. Count the number of different sailor names

SELECT COUNT(DISTINCT sname) AS Unique_Names
FROM Sailors;

    Explanation: COUNT(DISTINCT ...) counts unique sailor names, even if names are repeated.

✅ IV. Calculate the average age of all sailors

SELECT AVG(age) AS Overall_Average_Age
FROM Sailors;